// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gofiber/fiber/v2"
	"go.uber.org/zap"
	"live-poilot/api/handlers"
	"live-poilot/api/routes"
	"live-poilot/pkg/conf"
	"live-poilot/pkg/repository"
	"live-poilot/pkg/service"
)

// Injectors from wire.go:

func wireApp(appConfig conf.AppConfig, logger *zap.Logger) (*fiber.App, func(), error) {
	repositoryRepository, cleanup, err := repository.NewRepository(appConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := service.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService)
	userRoutes := routes.NewUserRoutes(userHandler)
	v := routes.ProvideRoutes(userRoutes)
	app := newFiberApp(logger, v)
	return app, func() {
		cleanup()
	}, nil
}
